// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type thirdCounterRecordT struct {
	ProgramName [60]int8
	Counter     int32
}

// loadThird returns the embedded CollectionSpec for third.
func loadThird() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ThirdBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load third: %w", err)
	}

	return spec, err
}

// loadThirdObjects loads third and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*thirdObjects
//	*thirdPrograms
//	*thirdMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadThirdObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadThird()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// thirdSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type thirdSpecs struct {
	thirdProgramSpecs
	thirdMapSpecs
	thirdVariableSpecs
}

// thirdProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type thirdProgramSpecs struct {
	Third *ebpf.ProgramSpec `ebpf:"third"`
}

// thirdMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type thirdMapSpecs struct {
	CounterMap *ebpf.MapSpec `ebpf:"counter_map"`
}

// thirdVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type thirdVariableSpecs struct {
}

// thirdObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadThirdObjects or ebpf.CollectionSpec.LoadAndAssign.
type thirdObjects struct {
	thirdPrograms
	thirdMaps
	thirdVariables
}

func (o *thirdObjects) Close() error {
	return _ThirdClose(
		&o.thirdPrograms,
		&o.thirdMaps,
	)
}

// thirdMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadThirdObjects or ebpf.CollectionSpec.LoadAndAssign.
type thirdMaps struct {
	CounterMap *ebpf.Map `ebpf:"counter_map"`
}

func (m *thirdMaps) Close() error {
	return _ThirdClose(
		m.CounterMap,
	)
}

// thirdVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadThirdObjects or ebpf.CollectionSpec.LoadAndAssign.
type thirdVariables struct {
}

// thirdPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadThirdObjects or ebpf.CollectionSpec.LoadAndAssign.
type thirdPrograms struct {
	Third *ebpf.Program `ebpf:"third"`
}

func (p *thirdPrograms) Close() error {
	return _ThirdClose(
		p.Third,
	)
}

func _ThirdClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed third_bpfel.o
var _ThirdBytes []byte
